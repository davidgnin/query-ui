'use strict';
import inputToDate from './input_to_date';
import dateToInput from './date_to_input';
import updateDate from './update_date';
import { isDOMElement, PREFIX, MONTHS, WEEK_DAYS, DEF_INPUT_FUNC }
  from './utils';

let prepareConfig = function prepareConfig(params) {
  let config = {
    input: isDOMElement(params.input) ? params.input : undefined,
    withDate: params.withDate === false || params.withDate === 'false' ?
      false : true,
    withTime: params.withTime === false || params.withTime === 'false' ?
      false : true,
    id: params.id !== undefined ? parseInt(params.id, 10) : 0,
    inputFunc: typeof params.inputFunc === 'function' ? params.inputFunc :
      DEF_INPUT_FUNC,
    outputFunc: typeof params.outputFunc === 'string' ||
      typeof params.outputFunc === 'function' ? params.outputFunc : undefined,
    months: typeof params.months === 'object' && params.months.length === 12 ?
      params.months : MONTHS,
    weekDays: typeof params.weekDays === 'object' &&
      params.weekDays.length === 7 ? params.weekDays : WEEK_DAYS,
    date: {
      year: 1970,
      month: 0,
      day: 1,
      weekDay1: 3,
      hour: 0,
      min: 0,
      sec: 0,
      ms: 0
    },
    inputToDate: inputToDate,
    dateToInput: dateToInput,
    updateDate: updateDate,
    removeInstance: undefined
  };

  //Ensure non-existing ID for autogenerated values
  if (typeof config.id === 'number') {
    let el;
    do {
      config.id += 1;
      el = document.getElementById(`${PREFIX}-${config.id}`);
    } while (el);
    config.id = parseInt(config.id, 10);
  }

  if (!config.input) {
    throw 'Param `input` is mandarory';
  }
  if (!config.withDate && !config.withTime) {
    throw 'At least `date` or `time` has to be active';
  }

  //Output defaults
  if (config.outputFunc === undefined) {
    if (config.withDate && config.withTime) {
      config.outputFunc = 'toISOString';
    } else if (config.withDate) {
      config.outputFunc = function (date) {
        return date.toISOString().split('T')[0];
      };
    } else { //config.withTime
      config.outputFunc = function (date) {
        return date.toISOString().split('T')[1];
      };
    }
  }

  return config;
};

export default prepareConfig;
